import os
import json
import pandas as pd
import requests
from datetime import datetime, timedelta

API_KEY = os.getenv("FINNHUB_API_KEY", "YOUR_API_KEY")

# TARGET_MONTHLY „Å® TARGET_WEEKLY „ÅÆÂÆöÁæ©
TARGET_MONTHLY = [
    # Tech Giants & Major Tech
    "AAPL", "MSFT", "GOOGL", "META", "AMZN", "NFLX", "TSLA", "NVDA", "IBM", "ORCL", "CSCO",
    "ADBE", "CRM", "INTC", "SNOW", "PANW", "PLTR",
    
    # Semiconductors
    "AMD", "TSM", "ASML", "QCOM", "AVGO", "TXN", "AMAT", "LRCX", "MU", "ARM", "ANET",
    "MRVL", "NXPI", "ADI", "ON", "MPWR",
    
    # Finance & Banks
    "JPM", "BAC", "WFC", "C", "MS", "GS", "BLK", "SCHW", "AXP", "V", "MA",
    "BNY", "USB", "PNC", "TFC", "TRV", "IBKR", "SYF", "KEY", "MTB", "HBAN",
    "RF", "ZION", "ALLY", "SOFI", "COF", "KKR", "BX",
    
    # Healthcare & Pharma
    "JNJ", "LLY", "UNH", "ABBV", "MRK", "PFE", "TMO", "ABT", "CVS", "HUM", "ELV",
    "ISRG", "REGN", "GILD", "BIIB", "AMGN", "ZTS", "AZN", "HCA",
    
    # Consumer Discretionary
    "DIS", "NKE", "SBUX", "MCD", "CMG", "TGT", "HD", "LOW", "BKNG", "MAR",
    "GM", "F", "ABNB", "UBER", "LYFT", "ETSY", "LULU",
    
    # Consumer Staples
    "PG", "KO", "PEP", "COST", "WMT", "MDLZ", "CL", "KDP", "WEN",
    
    # Energy
    "XOM", "CVX", "COP", "SLB", "BP", "OXY", "EOG", "MPC",
    
    # Industrial & Transportation
    "BA", "CAT", "GE", "HON", "RTX", "UPS", "FDX", "UNP", "CSX", "NSC",
    "GD", "LMT", "DE", "ITW", "DOV", "WM", "URI", "FAST",
    "AAL", "UAL", "DAL", "ALK",
    
    # Communication Services
    "VZ", "T", "TMUS", "CMCSA", "CHTR",
    
    # Materials & Industrials
    "NEM", "FCX", "NUE", "CLF", "STLD", "APD", "LIN", "ECL", "BALL", "CCK",
    
    # REITs & Real Estate
    "AMT", "PLD", "EQIX", "PSA", "AGNC",
    
    # FinTech & Payments
    "PYPL", "SQ", "COIN", "HOOD",
    
    # Other Notable
    "SPOT", "RDFN", "OPEN", "DUOL", "UPST", "ENPH", "GLW", "CBOE", "VRT", "CTLT",
    "KMI", "ENB", "RMBS", "WHR", "GNTX", "GFF", "SENS", "CLOV", "EVLV", "SIGA",
    "VIA", "FAST", "ERIC", "ACI", "LII", "PGNY", "INFY", "ALV", "WTFC", "RLI",
    "BOKF", "APH", "CLFD", "CNI", "LYB", "FET", "NVST", "EXAS", "SNDK", "NU", "DLO",
]

# WeeklyË°®Á§∫Áî®Ôºà„Çà„ÇäÂ§ö„Åè„ÅÆÈäòÊüÑÔºâ
TARGET_WEEKLY = [
    # MonthlyÈäòÊüÑ„ÇíÂÖ®„Å¶Âê´„ÇÄ
    *TARGET_MONTHLY,
    
    # Additional Tech
    "ADBE", "CRM", "ORCL", "CSCO", "IBM", "SNOW", "PLTR", "PANW", "CRWD", "ZS",
    "DDOG", "NET", "MDB", "WDAY", "NOW", "TEAM", "ZM", "DOCU", "OKTA", "TWLO",
    "ARM", "SHOP", "SQ", "PYPL", "COIN", "RBLX", "U", "SPOT", "ABNB", "UBER", "LYFT",
    
    # Additional Semiconductors
    "MU", "MCHP", "NXPI", "ADI", "MRVL", "ON", "MPWR", "SWKS", "QRVO", "WOLF",
    
    # Additional Finance
    "BNY", "TFC", "USB", "PNC", "TRV", "AIG", "MET", "PRU", "ALL", "CB",
    "RF", "KEY", "HBAN", "MTB", "FITB", "CFG", "ZION", "ALLY", "SOFI",
    "IBKR", "SYF", "COF", "DFS", "KKR", "BX", "APO",
    
    # Additional Healthcare
    "CVS", "CI", "HUM", "ELV", "ISRG", "REGN", "VRTX", "GILD", "BIIB", "AMGN",
    "ZTS", "ILMN", "DXCM", "EW", "SYK", "BSX", "MDT", "HOLX",
    
    # Biotech
    "MRNA", "BNTX", "NVAX", "EXAS", "TDOC", "VEEV",
    
    # Consumer Discretionary
    "BKNG", "MAR", "HLT", "EXPE", "LVS", "MGM", "WYNN", "CCL", "RCL", "NCLH",
    "GM", "F", "RIVN", "LCID", "NIO", "LI", "XPEV",
    "ETSY", "EBAY", "W", "CHWY", "RVLV", "LULU", "DECK", "CROX", "TPR",
    
    # Consumer Staples
    "PG", "KO", "PEP", "COST", "WMT", "KR", "MDLZ", "CL", "GIS", "K", "HSY",
    "EL", "CLX", "CHD", "MO", "PM", "BTI",
    
    # Energy
    "OXY", "MPC", "VLO", "PSX", "HES", "DVN", "FANG", "BP", "SHEL", "TTE", "E",
    
    # Industrial
    "UNP", "CSX", "NSC", "GD", "LMT", "NOC", "DE", "EMR", "ITW", "MMM",
    "WM", "RSG", "URI", "FAST", "PCAR", "ODFL", "JBHT", "CHRW",
    "AAL", "UAL", "DAL", "LUV", "ALK",
    
    # Real Estate / REITs
    "AMT", "PLD", "EQIX", "PSA", "O", "WELL", "DLR", "SPG", "VICI", "AVB",
    
    # Materials
    "LIN", "APD", "ECL", "DD", "DOW", "NEM", "FCX", "NUE", "STLD", "CLF",
    "ALB", "MP", "LAC", "BALL", "CCK", "PKG",
    
    # Telecom
    "CMCSA", "CHTR", "LUMN",
    
    # Utilities
    "NEE", "DUK", "SO", "D", "AEP", "EXC", "SRE", "XEL", "WEC", "ES",
    
    # Other Notable
    "RDFN", "OPEN", "COIN", "HOOD", "UPST", "AFRM", "BNPL",
    "DUOL", "BMBL", "MTCH", "PINS", "SNAP", "TWTR",
    "ENPH", "SEDG", "RUN", "FSLR", "PLUG", "BE", "CLNE",
    "AGNC", "NLY", "STWD", "ARR",
]

# ÈáçË§á„ÇíÂâäÈô§
TARGET_WEEKLY = list(dict.fromkeys(TARGET_WEEKLY))

ASSETS_DIR = "assets/logos"

print(f"üìä TARGET_MONTHLY: {len(TARGET_MONTHLY)} symbols")
print(f"üìä TARGET_WEEKLY: {len(TARGET_WEEKLY)} symbols")

# Ê¨†ÊêçÂÄ§„Çí0„Å´ÁΩÆ„ÅçÊèõ„Åà„Çã
def clean_record(record):
    return {k: (0 if v is None else v) for k, v in record.items()}

today = datetime.now()

# ‰ªäÊúà„ÅÆ1Êó•
month_start = today.replace(day=1)

# ÊúàÂàù„ÅÆÈÄ±„ÅÆÊúàÊõúÊó•„Åæ„ÅßÈÅ°„Çã
while month_start.weekday() != 0:  # 0 = Monday
    month_start -= timedelta(days=1)

# ÁøåÊúà„ÇíË®àÁÆó
if today.month == 12:
    next_month = today.replace(year=today.year + 1, month=1, day=1)
else:
    next_month = today.replace(month=today.month + 1, day=1)

# ÁøåÊúà„ÅÆÊú´Êó•„ÇíË®àÁÆó
if next_month.month == 12:
    next_month_end = next_month.replace(year=next_month.year + 1, month=1, day=1) - timedelta(days=1)
else:
    next_month_end = next_month.replace(month=next_month.month + 1, day=1) - timedelta(days=1)

print(f"üìÖ Period: {month_start.strftime('%Y-%m-%d')} to {next_month_end.strftime('%Y-%m-%d')}")

# ÊúàÔΩûÈáë„ÅÆ„Åø„ÅÆÊó•‰ªò„É™„Çπ„Éà„ÇíÁîüÊàê
weekday_dates = []
current = month_start
while current <= next_month_end:
    if current.weekday() < 5:  # 0-4 = Mon-Fri
        weekday_dates.append(current)
    current += timedelta(days=1)

# ÈÄ±„Åî„Å®„Å´ÂàÜÂâ≤(ÊúàÊõú„Åã„ÇâÈáëÊõú„Åæ„Åß„ÅÆ5Êó•Èñì)
weeks = []
current_week = []
for date in weekday_dates:
    # ÊúàÊõúÊó•„Åã„ÇâÊñ∞„Åó„ÅÑÈÄ±„ÇíÈñãÂßã
    if date.weekday() == 0:
        if current_week:  # Ââç„ÅÆÈÄ±„Åå„ÅÇ„Çå„Å∞‰øùÂ≠ò
            weeks.append(current_week)
        current_week = [date]
    else:
        current_week.append(date)
if current_week:
    weeks.append(current_week)

print(f"üìÖ Total weeks: {len(weeks)}")

# API„Åã„Çâ„Éá„Éº„ÇøÂèñÂæóÔºàÈÄ±Âçò‰ΩçÔºâ
all_data = []
for week in weeks:
    if not week:
        continue
    
    from_date = week[0].strftime("%Y-%m-%d")
    to_date = week[-1].strftime("%Y-%m-%d")
    
    url = f"https://finnhub.io/api/v1/calendar/earnings?from={from_date}&to={to_date}&token={API_KEY}"
    
    try:
        response = requests.get(url)
        week_data = response.json().get("earningsCalendar", [])
        # ÂØæË±°ÈäòÊüÑ„ÅÆ„ÅøÊäΩÂá∫ÔºÜÊ¨†ÊêçÂÄ§Âá¶ÁêÜ
        all_data.extend([clean_record(d) for d in week_data if d["symbol"] in TARGET_WEEKLY])
        print(f"ÂèñÂæóÂÆå‰∫Ü: {from_date} - {to_date} ({len(week_data)}‰ª∂)")
    except Exception as e:
        print(f"„Ç®„É©„Éº: {from_date} - {to_date} - {e}")

# JSON„Éï„Ç°„Ç§„É´„Å´Âá∫Âäõ
with open("earnings_data.json", "w", encoding="utf-8") as f:
    json.dump(all_data, f, ensure_ascii=False, indent=2)

print(f"ÂêàË®à {len(all_data)} ‰ª∂„ÅÆ„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü")

# HTML„ÅÆÁîüÊàê
html = """<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Earnings Calendar - October 2025</title>
<style>
* {
    box-sizing: border-box;
}
body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background-color: #f6f7f9;
    margin: 0;
    padding: 0;
}
header {
    background-color: #31343C;
    color: white;
    padding: 16px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
}
.header-left {
    display: flex;
    align-items: center;
    gap: 12px;
}
.header-icon {
    width: 40px;
    height: 40px;
    object-fit: contain;
}
.header-logo-text {
    font-size: 1.2em;
    font-weight: 600;
    color: white;
}
.header-content {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}
.header-title {
    font-size: 1.8em;
    font-weight: 600;
    color: white;
    margin: 0;
}
.header-date {
    font-size: 1.0em;
    color: #ddd;
    margin-top: 4px;
}
.controls {
    background-color: white;
    padding: 16px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    gap: 12px;
    align-items: flex-start;
}
.mode-toggle {
    display: flex;
    gap: 10px;
}
.mode-btn {
    padding: 10px 20px;
    border: 2px solid #31343C;
    background-color: white;
    color: #31343C;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    transition: all 0.3s;
}
.mode-btn.active {
    background-color: #31343C;
    color: white;
}
.week-nav {
    display: none;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}
.week-nav.active {
    display: flex;
}
.week-controls {
    display: flex;
    align-items: center;
    gap: 10px;
}
.nav-btn {
    width: 40px;
    height: 30px;
    border: none;
    background-color: #f0f0f0;
    border-radius: 8px;
    cursor: pointer;
    font-size: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    color: #333;
}
.nav-btn:hover:not(:disabled) {
    background-color: #31343C;
    color: white;
    transform: scale(1.1);
}
.nav-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}
.week-label {
    font-weight: 600;
    font-size: 15px;
    color: #333;
    min-width: 200px;
    text-align: center;
}
.week-indicators {
    display: flex;
    gap: 8px;
}
.week-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #ddd;
    cursor: pointer;
    transition: all 0.3s;
}
.week-dot.active {
    background-color: #31343C;
    transform: scale(1.3);
}
.search-box {
    display: flex;
    width: 100%;
}
.search-box input {
    width: 100%;
    max-width: 400px;
    padding: 10px 16px;
    border: 2px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
}
.search-box input:focus {
    outline: none;
    border-color: #31343C;
}
.container {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    padding: 20px;
}

.week-row {
    display: contents;
}

@media (max-width: 768px) {
    .container {
        display: block;
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        -webkit-overflow-scrolling: touch;
        padding: 12px;
        scrollbar-width: thin;
        scrollbar-color: #31343C #f0f0f0;
    }
    
    .container::-webkit-scrollbar {
        height: 6px;
    }
    
    .container::-webkit-scrollbar-track {
        background: #f0f0f0;
        border-radius: 3px;
    }
    
    .container::-webkit-scrollbar-thumb {
        background: #31343C;
        border-radius: 3px;
    }

    .week-row {
        display: flex;
        gap: 8px;
        margin-bottom: 12px;
    }
    
    .day {
        min-width: 280px;
        flex-shrink: 0;
        scroll-snap-align: start;
    }
}

.day {
    background-color: rgba(255, 255, 255, 0.897);
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    padding: 10px;
    min-height: 150px;
    display: flex;
    flex-direction: column;
}
.day.today {
    border: 3px solid #4CAF50;
    box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3);
    background-color: #f0fff0;
}
.date {
    font-weight: 600;
    margin-bottom: 8px;
    color: #333;
    text-align: left;
}
.day.today .date {
    color: #4CAF50;
    font-size: 1.2em;
}
.logos {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
}
.logo-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 90px;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    background-color: #fff;
    padding: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    transition: all 0.3s;
}
.logo-card.hidden {
    display: none;
}
.logo-card img {
    width: 56px;
    height: 56px;
    object-fit: contain;
    margin-bottom: 6px;
    border-radius: 10%;
}
.symbol {
    font-size: 14px;
    font-weight: 600;
    color: #333;
}
.no-earnings {
    font-size: 13px;
    color: #aaa;
    margin-top: 20px;
    text-align: center;
}
footer {
    text-align: center;
    font-size: 12px;
    color: #888;
    margin: 20px;
}

@media (max-width: 768px) {
    header {
        flex-direction: column;
        gap: 12px;
    }
    .header-left {
        width: 100%;
        justify-content: flex-start;
    }
    .header-content {
        position: static;
        transform: none;
    }
    .header-icon {
        width: 32px;
        height: 32px;
    }
    .header-logo-text {
        font-size: 1.0em;
    }
    .header-title {
        font-size: 1.2em;
    }
    .header-title.hidden {
        display: none;
    }
    .header-left {
        display: none;
    }
    .header-date {
        font-size: 0.9em;
    }
    .day {
        min-height: 120px;
        padding: 8px;
    }
    .logos {
        grid-template-columns: repeat(3, 1fr);
        gap: 6px;
    }
    .logo-card {
        height: 70px;
    }
    .logo-card img {
        width: 40px;
        height: 40px;
    }
    .symbol {
        font-size: 12px;
    }
    .mode-btn {
        padding: 8px 16px;
        font-size: 14px;
    }
    .week-label {
        min-width: 180px;
        font-size: 14px;
    }
}

@media (max-width: 480px) {
    .day {
        min-width: 260px;
    }
    .week-label {
        min-width: 160px;
        font-size: 13px;
    }
}

.weekday-header {
    display: contents;
}
.weekday-cell {
    background-color: #31343C;
    color: white;
    padding: 4px;
    text-align: center;
    font-weight: 600;
    font-size: 16px;
}

@media (max-width: 768px) {
    .weekday-header {
        display: none;
    }
}

</style>
</head>
<body>
<header>
    <div class="header-left">
        <img src="assets/icon.png" alt="Market Time Zen" class="header-icon">
        <span class="header-logo-text">Market Time Zen</span>
    </div>
    <div class="header-content">
        <div class="header-title">Earnings Calendar</div>
        <div class="header-date">""" + datetime.now().strftime('%B %d, %Y') + """</div>
    </div>
</header>

<div class="controls">
    <div class="mode-toggle">
        <button class="mode-btn active" onclick="switchMode('monthly')">Monthly</button>
        <button class="mode-btn" onclick="switchMode('weekly')">Weekly</button>
    </div>
    
    <div class="week-nav" id="weekNav">
        <div class="week-controls">
            <button class="nav-btn" id="prevWeek" onclick="changeWeek(-1)">‚Äπ</button>
            <span class="week-label" id="weekLabel">Week 1</span>
            <button class="nav-btn" id="nextWeek" onclick="changeWeek(1)">‚Ä∫</button>
        </div>
        <div class="week-indicators" id="weekDots"></div>
    </div>
    
    <div class="search-box">
        <input type="text" id="searchInput" placeholder="Search by symbol (e.g., AAPL, TSLA)..." oninput="searchSymbols()">
    </div>
</div>

<div class="container" id="calendar"></div>

<footer>Last updated: """ + datetime.now().strftime('%Y-%m-%d %H:%M') + """</footer>

<script>
let earningsData = [];
let currentMode = 'monthly';
let currentWeek = 0;
let weeks = """ + json.dumps([[d.strftime("%Y-%m-%d") for d in week] for week in weeks]) + """;
let targetMonthly = """ + json.dumps(TARGET_MONTHLY) + """;
let targetWeekly = """ + json.dumps(TARGET_WEEKLY) + """;

// „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
fetch('earnings_data.json')
    .then(res => res.json())
    .then(data => {
        earningsData = data;
        currentWeek = findCurrentWeek();
        renderCalendar();
    });

function findCurrentWeek() {
    const today = new Date().toISOString().split('T')[0];
    const todayDay = new Date().getDay(); // 0=Êó•, 6=Âúü
    
    for (let i = 0; i < weeks.length; i++) {
        const weekDates = weeks[i];
        
        // ‰ªäÊó•„ÅåÊúà„ÄúÈáë„ÅÆÂ†¥Âêà„ÄÅ„Åù„ÅÆÈÄ±„ÇíÊé¢„Åô
        if (todayDay >= 1 && todayDay <= 5) {
            if (weekDates.includes(today)) {
                return i;
            }
        }
        // ÂúüÊó•„ÅÆÂ†¥Âêà„ÄÅÊ¨°„ÅÆÈÄ±Ôºà‰ªäÊó•„Çà„ÇäÂæå„ÅÆÊúÄÂàù„ÅÆÈÄ±Ôºâ„ÇíÊé¢„Åô
        else {
            if (weekDates[0] > today) {
                return i;
            }
        }
    }
    return 0; // Ë¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÊúÄÂàù„ÅÆÈÄ±
}

function switchMode(mode) {
    currentMode = mode;
    document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    if (mode === 'weekly') {
        document.getElementById('weekNav').classList.add('active');
        renderWeekDots();
    } else {
        document.getElementById('weekNav').classList.remove('active');
    }
    
    renderCalendar();
}

function renderWeekDots() {
    const dotsContainer = document.getElementById('weekDots');
    dotsContainer.innerHTML = '';
    weeks.forEach((week, idx) => {
        const dot = document.createElement('div');
        dot.className = 'week-dot' + (idx === currentWeek ? ' active' : '');
        dot.onclick = () => {
            currentWeek = idx;
            renderCalendar();
        };
        dotsContainer.appendChild(dot);
    });
}

function changeWeek(delta) {
    currentWeek = Math.max(0, Math.min(weeks.length - 1, currentWeek + delta));
    renderCalendar();
}

function renderCalendar() {
    const calendar = document.getElementById('calendar');
    calendar.innerHTML = '';

    const headerRow = document.createElement('div');
    headerRow.className = 'weekday-header';
    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].forEach(day => {
        const cell = document.createElement('div');
        cell.className = 'weekday-cell';
        cell.textContent = day;
        cell.align = 'legt';
        headerRow.appendChild(cell);
    });
    calendar.appendChild(headerRow);
    
    let targetSymbols = currentMode === 'monthly' ? targetMonthly : targetWeekly;
    
    // Monthly„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÄÅÈÄ±„Åî„Å®„Å´Âá¶ÁêÜ
    if (currentMode === 'monthly') {
        weeks.forEach(weekDates => {
            // „Åì„ÅÆÈÄ±„Å´Ê±∫ÁÆó„Éá„Éº„Çø„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            const hasEarnings = weekDates.some(dateStr => {
                const earnings = earningsData.filter(e => 
                    e.date === dateStr && targetSymbols.includes(e.symbol)
                );
                return earnings.length > 0;
            });
            
            // Ê±∫ÁÆó„Éá„Éº„Çø„Åå„Å™„ÅÑÈÄ±„ÅØ„Çπ„Ç≠„ÉÉ„Éó
            if (!hasEarnings) {
                return;
            }
            
            // ÈÄ±„ÅÆË°å„Çí‰ΩúÊàê
            const weekRow = document.createElement('div');
            weekRow.className = 'week-row';
            
            // „Åì„ÅÆÈÄ±„ÅÆÊó•‰ªò„ÇíË°®Á§∫ÔºàÊúà„ÄúÈáë„ÅÆ5ÂàóÔºâ
            weekDates.forEach(dateStr => {
                const dayDiv = renderDay(dateStr, targetSymbols);
                weekRow.appendChild(dayDiv);
            });
            
            calendar.appendChild(weekRow);
        });
    } else {
        // Weekly„É¢„Éº„Éâ„ÅÆÂ†¥Âêà
        const weekDates = weeks[currentWeek];
        
        // „Åì„ÅÆÈÄ±„Å´Ê±∫ÁÆó„Éá„Éº„Çø„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        const hasEarnings = weekDates.some(dateStr => {
            const earnings = earningsData.filter(e => 
                e.date === dateStr && targetSymbols.includes(e.symbol)
            );
            return earnings.length > 0;
        });
        
        // ÈÄ±„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅÆÊõ¥Êñ∞
        document.getElementById('weekLabel').textContent = 
            `Week ${currentWeek + 1}: ${formatDateRange(weeks[currentWeek])}`;
        document.getElementById('prevWeek').disabled = currentWeek === 0;
        document.getElementById('nextWeek').disabled = currentWeek === weeks.length - 1;
        
        document.querySelectorAll('.week-dot').forEach((dot, idx) => {
            dot.classList.toggle('active', idx === currentWeek);
        });
        
        // Ê±∫ÁÆó„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÊó•‰ªò„ÇíË°®Á§∫
        if (hasEarnings) {
            const weekRow = document.createElement('div');
            weekRow.className = 'week-row';
            
            weekDates.forEach(dateStr => {
                const dayDiv = renderDay(dateStr, targetSymbols);
                weekRow.appendChild(dayDiv);
            });
            
            calendar.appendChild(weekRow);
        } else {
            // Ê±∫ÁÆó„Éá„Éº„Çø„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
            const noDataDiv = document.createElement('div');
            noDataDiv.style.width = '100%';
            noDataDiv.style.textAlign = 'center';
            noDataDiv.style.padding = '40px';
            noDataDiv.style.color = '#888';
            noDataDiv.style.fontSize = '16px';
            noDataDiv.textContent = 'No earnings data for this week';
            calendar.appendChild(noDataDiv);
        }
    }
}

function renderDay(dateStr, targetSymbols) {
    const today = new Date().toISOString().split('T')[0];
    
   const earnings = earningsData.filter(e => 
        e.date === dateStr && targetSymbols.includes(e.symbol)
    ).sort((a, b) => a.symbol.localeCompare(b.symbol));
    
    const dayDiv = document.createElement('div');
    dayDiv.className = 'day';
    if (dateStr === today) {
        dayDiv.classList.add('today');
    }
    
    const [year, month, day] = dateStr.split('-');
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const dateDiv = document.createElement('div');
    dateDiv.className = 'date';
    dateDiv.textContent = `${monthNames[parseInt(month) - 1]}, ${parseInt(day)}`;
    dayDiv.appendChild(dateDiv);
    
    if (earnings.length > 0) {
        const logosDiv = document.createElement('div');
        logosDiv.className = 'logos';
        
        // Monthly„É¢„Éº„Éâ„Åß„ÅØÊúÄÂ§ß9‰ª∂„Åæ„ÅßË°®Á§∫
        const displayEarnings = currentMode === 'monthly' ? earnings.slice(0, 9) : earnings;
        
        displayEarnings.forEach(e => {
            const card = document.createElement('div');
            card.className = 'logo-card';
            card.dataset.symbol = e.symbol;
            
            const logoPath = `${""" + json.dumps(ASSETS_DIR) + """}/${e.symbol}.png`;
            const img = document.createElement('img');
            img.src = logoPath;
            img.alt = e.symbol;
            img.title = e.symbol;
            img.onerror = () => img.style.display = 'none';
            
            const symbolDiv = document.createElement('div');
            symbolDiv.className = 'symbol';
            symbolDiv.textContent = e.symbol;
            
            card.appendChild(img);
            card.appendChild(symbolDiv);
            logosDiv.appendChild(card);
        });
        
        dayDiv.appendChild(logosDiv);
    } else {
        const noEarnings = document.createElement('div');
        noEarnings.className = 'no-earnings';
        noEarnings.textContent = 'No Earnings';
        dayDiv.appendChild(noEarnings);
    }
    
    return dayDiv;
}

function formatDateRange(dates) {
    if (!dates || dates.length === 0) return '';
    const start = new Date(dates[0] + 'T00:00:00');
    const end = new Date(dates[dates.length - 1] + 'T00:00:00');
    return `${start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;
}

function searchSymbols() {
    const query = document.getElementById('searchInput').value.toUpperCase().trim();
    const cards = document.querySelectorAll('.logo-card');
    
    if (!query) {
        // Ê§úÁ¥¢„ÇØ„Ç®„É™„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØ„Åô„Åπ„Å¶Ë°®Á§∫
        cards.forEach(card => card.classList.remove('hidden'));
    } else {
        // Ê§úÁ¥¢„ÇØ„Ç®„É™„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Éû„ÉÉ„ÉÅ„Åó„Å™„ÅÑ„ÇÇ„ÅÆ„ÇíÈùûË°®Á§∫
        cards.forEach(card => {
            const symbol = card.dataset.symbol;
            if (symbol.includes(query)) {
                card.classList.remove('hidden');
            } else {
                card.classList.add('hidden');
            }
        });
    }
}
</script>
</body>
</html>
"""

with open("index.html", "w", encoding="utf-8") as f:
    f.write(html)

print("‚úÖ HTML calendar generated successfully.")